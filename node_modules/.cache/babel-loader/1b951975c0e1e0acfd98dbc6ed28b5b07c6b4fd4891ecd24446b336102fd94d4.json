{"ast":null,"code":"var _jsxFileName = \"/home/oem/Desktop/weathersite/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport { BsSun, BsMoon, BsCloudSun, BsCloudMoon, BsCloudRain, BsCloudRainHeavy, BsCloudLightningRain, BsCloudSnow, BsCloudFog } from 'react-icons/bs';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(async position => {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      setLocation({\n        latitude,\n        longitude\n      });\n      const API_KEY = '97d54f6f736bc4d9d7014516da54aa0c';\n      const API_URL = `http://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${API_KEY}`;\n      try {\n        const response = await axios.get(API_URL);\n        setWeatherData(response.data);\n      } catch (error) {\n        console.error(error);\n      }\n    });\n  }, []);\n  let time = null;\n  let city = null;\n  let temperature = null;\n  let weatherIcon = null;\n  if (weatherData.dt) {\n    time = new Date(weatherData.dt * 1000).toLocaleTimeString().slice(0, 5);\n    city = weatherData.name;\n    temperature = (weatherData.main.temp - 273.15).toFixed(0);\n    const {\n      id\n    } = weatherData.weather[0];\n    if (id >= 200 && id <= 232) {\n      weatherIcon = /*#__PURE__*/_jsxDEV(BsCloudLightningRain, {\n        className: \"icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 25\n      }, this);\n    } else if (id >= 300 && id <= 321) {\n      weatherIcon = /*#__PURE__*/_jsxDEV(BsCloudRain, {\n        className: \"icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 25\n      }, this);\n    } else if (id >= 500 && id <= 531) {\n      weatherIcon = /*#__PURE__*/_jsxDEV(BsCloudRainHeavy, {\n        className: \"icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 25\n      }, this);\n    } else if (id >= 600 && id <= 622) {\n      weatherIcon = /*#__PURE__*/_jsxDEV(BsCloudSnow, {\n        className: \"icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 25\n      }, this);\n    } else if (id >= 700 && id <= 781) {\n      weatherIcon = /*#__PURE__*/_jsxDEV(BsCloudFog, {\n        className: \"icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 25\n      }, this);\n    } else if (id >= 801 && id <= 804) {\n      const currentHour = new Date().getHours();\n      weatherIcon = currentHour >= 6 && currentHour <= 18 ? /*#__PURE__*/_jsxDEV(BsCloudSun, {\n        className: \"icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(BsCloudMoon, {\n        className: \"icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this);\n    } else if (id === 800) {\n      const currentHour = new Date().getHours();\n      weatherIcon = currentHour >= 6 && currentHour <= 18 ? /*#__PURE__*/_jsxDEV(BsSun, {\n        className: \"icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(BsMoon, {\n        className: \"icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"WEATHER SITE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this), city ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [city, \", \", time]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [temperature, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: weatherIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"to see the weather of your city, please allow access to your location in your browser, maybe you browser, block the access, allowed that for site can work, thank you\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"If Google Chrome don't work, use Mozilla FireFox\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","BsSun","BsMoon","BsCloudSun","BsCloudMoon","BsCloudRain","BsCloudRainHeavy","BsCloudLightningRain","BsCloudSnow","BsCloudFog","App","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","setLocation","API_KEY","API_URL","response","get","setWeatherData","data","error","console","time","city","temperature","weatherIcon","weatherData","dt","Date","toLocaleTimeString","slice","name","main","temp","toFixed","id","weather","currentHour","getHours"],"sources":["/home/oem/Desktop/weathersite/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport { BsSun, BsMoon, BsCloudSun, BsCloudMoon, BsCloudRain, BsCloudRainHeavy, BsCloudLightningRain, BsCloudSnow, BsCloudFog } from 'react-icons/bs';\nimport './App.css'\n\nexport default function App () {\n    useEffect(() => {\n        navigator.geolocation.getCurrentPosition(async position => {\n          const { latitude, longitude } = position.coords;\n          setLocation({ latitude, longitude });\n    \n          const API_KEY = '97d54f6f736bc4d9d7014516da54aa0c';\n          const API_URL = `http://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${API_KEY}`;\n    \n          try {\n            const response = await axios.get(API_URL);\n            setWeatherData(response.data);\n          } catch (error) {\n            console.error(error);\n          }\n        });\n      }, []);\n    \n      let time = null;\n      let city = null;\n      let temperature = null;\n      let weatherIcon = null;\n    \n      if (weatherData.dt) {\n        time = new Date(weatherData.dt * 1000).toLocaleTimeString().slice(0, 5);\n        city = weatherData.name;\n        temperature = (weatherData.main.temp - 273.15).toFixed(0);\n    \n        const { id } = weatherData.weather[0];\n        if (id >= 200 && id <= 232) {\n          weatherIcon = <BsCloudLightningRain className='icon' />;\n        } else if (id >= 300 && id <= 321) {\n          weatherIcon = <BsCloudRain className='icon' />;\n        } else if (id >= 500 && id <= 531) {\n          weatherIcon = <BsCloudRainHeavy className='icon' />;\n        } else if (id >= 600 && id <= 622) {\n          weatherIcon = <BsCloudSnow className='icon' />;\n        } else if (id >= 700 && id <= 781) {\n          weatherIcon = <BsCloudFog className='icon' />;\n        } else if (id >= 801 && id <= 804) {\n          const currentHour = new Date().getHours();\n          weatherIcon = currentHour >= 6 && currentHour <= 18 ? (\n            <BsCloudSun className='icon' />\n          ) : (\n            <BsCloudMoon className='icon' />\n          );\n        } else if (id === 800) {\n          const currentHour = new Date().getHours();\n          weatherIcon = currentHour >= 6 && currentHour <= 18 ? (\n            <BsSun className='icon' />\n          ) : (\n            <BsMoon className='icon' />\n          );\n        }\n      }\n    \n    return (\n    <div className='app'>\n    <h1>WEATHER SITE</h1>\n    {city ? (\n      <>\n        <h2>\n          {city}, {time}\n        </h2>\n        <h3>\n          {temperature}Â°C\n        </h3>\n        <div className='icon'>\n          {weatherIcon}\n        </div>\n      </>\n    ) : (\n      <><h4>to see the weather of your city, please allow access to your location in your browser, maybe you browser,\n          block the access, allowed that for site can work, thank you</h4>\n          <h4>If Google Chrome don't work, use Mozilla FireFox</h4></>\n    )}\n  </div>);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}